class Node{
    public int element;
    public Node next;
    public Node prev;
    
    public Node(int element){
        this.element = element;
    }
}

class LinkedList{
    private Node head;
    private Node tail;
    
    public void add(int element){
        Node node = new Node(element);
        node.next = head;
        
        if (head == null) tail = node;
        else {
            head.prev = node;
            // tail.next = node;

        }
        node.prev = tail;
        head = node;
        tail.next= head;
    }
    
    public void prefixAndSuffix(int element){
        Node current = head;
        
        while(current != null){
            if(current.element == element){
                System.out.println(current.prev.element + " \t " + current.next.element);
                break;
            }
            current = current.next;
            
        }
        
    }
    
    public void remove(int element){
        if(head != null && head.element == element) {
            head = head.next;
            return;
        }
        
        Node current = head;
        while(current.next != null){
            if(current.next.element == element){
                current.next = current.next.next;
                break;
            }
            current = current.next;
        }
    
    }
    
    public void reverse(){
        
        Node current = head;
        Node next = null; 
        Node prev = null;
        
        
        while(current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next; 
        }
        
        head = prev;
        
    }
    
    public void print(){
        Node current = head;
        while(current != null){
            System.out.print(current.element + " -> ");
            current = current.next;
        }
        System.out.println(" null");
        
    }
}
